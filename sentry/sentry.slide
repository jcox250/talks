Sentry

# Slide
* What is Sentry

- Exception monitoring/Error tracking tool
- SDK that hooks itself into our runtime environment

: It's an exception monitoring tool which we can use to get better visibility into errors that are happening in our services rather than only being able to look at logs to see what happened and then having to seperately go and look in the code for where we've written the logs that are coming out.
: It also gives us a way to provide more context around errors and why they might have occured
: There's an SDK that hooks into the apps runtime environment which can then be used to report/manually log events to Sentry
: It's also seems to be the most popular solution for tracking errors



# Slide
* Features

- Hosted and self hosted options
- Official Docker Image
- Official Go SDK 
- Source Maps
- Stack Traces
- Aggregate errors
- Can display source code that's been compressed/minified or transpiled 
- Dashboards

: You can choose between a hosted solution or you can roll your own. 
: There's an official Go SDK. Not quite as fleshed out as the SDK for some of the other languages but easily has enough features for us to use it and not feel like we're not getting everything we need
: Source code is shown in the stack traces so you can view the code that threw the error in Sentry rather than having to reference logs and code in your editor
: You can also filter to show just the app stack trace or the entire stack trace
: Can even display source code that's been minified/compressed or transpiled. Not 100% if it can show source code for code that's been obfusticated.








# Slide
* Official SDKs

.image img/sentry_official_sdks.png




: So this is a list of all the SDKs that are officially maintained by the Sentry team 
: So as well as a Go SDK there are also offical React and C# SDKs. Which means that the teams that are still using C# would be able to easily make use of Sentry and the frontend applications would be able to record their errors to sentry too without us having to build our own libraries for each language/framework
: There's also a Django one so it would be possible to add sentry monitoring to something like LMS relatively easily.





# Slide
* Community supported SDKs

.image img/sentry_community_sdks.png



: And then this is a list of the community supported SDKs and there's a Kubernetes one which could be useful given it seems like we're going to end up using kubernetes?






# Slide
* How we can use it

.link https://docs.sentry.io/clients/go/usage/ Capturing errors, panics and events
.image img/capture_error_doc.png
.image img/capture_panic_doc.png

: One of the ways that we can use it is to manually report errors. So whenever an error occurs we can log it to Sentry which creates a new issue group or adds the issue to an existing group if the error has already occured and been logged to sentry which allows us to see how many times the same error has happened.

: CapureErrorAndWait and CaptureError are two methods that we can use to do this but in most cases I think we'd want to use CaptureError since it isn't blocking

: There's also a CapturePanic functioin that you can use and if a panic occurs in your code it gets logged to Sentry and then your program continues running



# Slide
* Enriching Error Data

.link https://docs.sentry.io/clients/go/context/ Add context to errors
.link https://sentry.io/organizations/flexera/discover/ Filter based on tags
.link https://sentry.io/features/breadcrumbs/ Breadcrumbs
.image img/tags_example.png


: All of the capture functions provided by the API accept additional arguments for passing a map of tags and context data. We can use tags to catagorise errors and provide more information about the errors that happened. 
: We can also record breadcrumbs which is the trail of events that happen before an error occurs. Breadcrumbs are different from directly recording events in that they're buffered until we send the next event which gives can give us even more context around why an error happened. 


: Very frontend specific example but we could also submit custom tags to provide more context so customer_id or tag by machine to see if a specific server is having issues
: Tags give us a way to group/aggregate and search for bugs/issues in the Sentry UI easily







#Â Slide
* Breadcrumbs

.image img/recording_breadcrumbs.png



: So I think breadcrumbs would be useful on the frontend because we could record what the user does and build up everything that they've done before they encounter an error and then when they encounter the error all that information can be sent to Sentry along with the error which makes debugging why the error occured much easier because you have so much more informaation to work with compared to just seeing a log with an error message.

: The JavaScript SDK will also automatically record some breadcrumbs so you don't have to litter your code manually recording breadcrumbs. For example one of the breadcrumbs that it automatically records is all location changes



# Slide
* Example

.code code/http-examples/http-panic-wrap.go /START OMIT/,/END OMIT/ HLraven






# Slide
* 

.image img/stacktrace_panic.png







# Slide
* Monitoring Interface

    type ExceptionMonitor interface {
        CaptureError(error)
        CapturePanic(func())
        CaptureMessage(string)
    }

    type Sentry struct {
        client *raven.Client
        tags map[string]string
    }

    func NewSentry(dsn string, tags map[string]string) *Sentry {
        return &Sentry{
            client: raven.NewClient(dsn),
            tags: tags,
        }
    }






# Slide
* Extend/Add New Logger Implementation

    type Implementation struct {
        Logger *logrus.Entry
        sentry *raven.Client
        tags map[string]string
    }

    func (i *Implementation) Log(s string, data map[string]interface{}) {
        // Normal logging logic
        i.sentry.CaptureMessage(s, i.tags) 
    }

    func (i *Implementation) LogError(s string, data map[string]interface{}) {
        // Normal logging logic
        i.sentry.CaptureError(s, i.tags) 
    }











# Slide
* Goa Example

.code code/goa-examples/raven-capture-panic.go /START OMIT/,/END OMIT/ HLmonitor







# Slide
* Stack Traces

.image img/stacktrace_1.png 600 700

: So when you do get errors whenever you click on them you can view the stack trace and you can choose betweeen viewing the entire stack trace which will show a stack trace for
your framework and third party lib files as well as any of your apps stack that was touched. But you can also filter it to show only your app code to make it even easier to see which parts of your code went wrong.








# Slide
* 

.image img/stacktrace_2.png







# Slide
* 

.image img/sentry_dashboard.png


: https://sentry.io/organizations/flexera/dashboards/?project=1396608&statsPeriod=14d&utc=false


# Slide
* Integration

.link https://sentry.io/integrations/github/ GitHub/GitHub Enterprise
.link https://sentry.io/integrations/jira/ Jira
.link https://sentry.io/integrations/pagerduty/ Pager Duty
Webhooks

: Currently has integration for Gituhub, Jira, Pager Duty and Teams.
: Can setup teams notifications using a webhook
: You can also configure email notifications to come through whenever bad things happen




* Github Integration

- Release tracking
- Link to GitHub issues
- Deploy emails
- Suggested assignees for errors based on commit history
- Can resolve issues on Sentry by including the ID in your commit message

: You can get alerts whenever a deployment introduces an error 
: It will suggest who the issue should be assigned to based (assuming this is based on the name associated with the commit that caused the issue)
: Whenever issues are resolved you can add the Sentry issue ID to your commit message to mark it as resolved





# Slide
* Jira Integration

- Create Jira issues from Sentry issues
- Synchronisation between comments, assigneess and status updates

: Whenever a new issue pops up in Sentry we can create a Jira ticket from it by clicking a button in Sentry
: Comments, assigness and ticket status are synchronised across Jira and Sentry for us
: Resolving an issue in Sentry will mark it as resolved in Jira and vice versa




# Slide
* Pager Duty Integration

- Sentry can send alerts for issues to pager duty

: Any issues that Sentry gets can be forwarded on to Pager Duty







# Slide
* Pricing & Limits

- Developer - free
- Team - $26/month 100k, 500k, 1.5M 3M+ events a month
- Business - $80/month 100k, 500k, 1.5M 3M+ events a month
- Enterprise (Contact them)

.link https://sentry.io/pricing/ pricing and limits


: Seem to be able to prepurchase the amount of events you think you'll use a month.
: Then if you go over this amount you can still keep recieving events but you pay for them on demand


#Slide
* POC

.link https://github.com/jcox15/sentry-poc github.com/jcox15/sentry-poc 


